#
# Environment Management Makefile
#

include Makefile.include

environment.$(ARCH).lock.yml: environment.yml
ifeq (conda, $(VIRTUALENV))
	$(CONDA_EXE) env update -n $(PROJECT_NAME) -f $<
	$(CONDA_EXE) env export -n $(PROJECT_NAME) -f $@
	# pip install -e .  # uncomment for conda <= 4.3
else
	$(error Unsupported Environment `$(VIRTUALENV)`. Use conda)
endif

.PHONY: create_environment
## Set up virtual (conda) environment for this project
create_environment: environment.$(ARCH).lock.yml
ifeq (conda,$(VIRTUALENV))
	@touch environment.yml
	@echo
	@echo "New conda env created. Activate with:"
	@echo ">>> conda activate $(PROJECT_NAME)"
	@echo ">>> make update_environment"
ifneq ("X$(wildcard .post-create-environment.txt)","X")
	@cat .post-create-environment.txt
endif
else
	$(error Unsupported Environment `$(VIRTUALENV)`. Use conda)
endif

.PHONY: delete_environment
## Delete the virtual (conda) environment for this project
delete_environment:
ifeq (conda,$(VIRTUALENV))
	@echo "Deleting conda environment."
	$(CONDA_EXE) env remove -n $(PROJECT_NAME)
	rm -f environment.$(ARCH).lock.yml
ifneq ("X$(wildcard .post-delete-environment.txt)","X")
	@cat .post-delete-environment.txt
endif
else
	$(error Unsupported Environment `$(VIRTUALENV)`. Use conda)
endif

.PHONY: update_environment
## Install or update Python Dependencies in the virtual (conda) environment
update_environment: test_environment environment.$(ARCH).lock.yml
ifneq ("X$(wildcard .post-update-environment.txt)","X")
	@cat .post-update-environment.txt
endif

.PHONY: test_environment
test_environment:
ifeq (conda,$(VIRTUALENV))
ifneq ($(notdir ${CONDA_DEFAULT_ENV}), $(PROJECT_NAME))
	$(error Must activate `$(PROJECT_NAME)` environment before proceeding)
endif
else
	$(error Unsupported Environment `$(VIRTUALENV)`. Use conda)
endif
